Old Phone Keypad
You are given an old phone with a keypad. Each key on the keypad has multiple letters assigned to it, which can be used to type messages.

These are the letters present on each key:

 [A,B,C]    [D,E,F]    [G,H,I]
   1         2         3

 [J,K,L]    [M,N,O]    [P,Q,R,S]  
   4         5          6

  [T,U]     [V,W,X]      [Y,Z]
    7         8          9

    [ ]       [ ]         [ ]
    *        0          #  

You are also provided with an integer array consisting of all the numbers that are pressed, in the same order. Each number can be pressed multiple times even if its mentioned only one time.

Explanation:

If 3 is given in the array this means corresponding letter can be [G,H,I]
Your task is to return the list of strings that can be generated by pressing the keys in the array by writing a recursive code.

NOTE: The buttons are pressed in given order i.e. first button at '0-th' index is pressed and then '1-st' and so on. The output should be in lexicographic order with only uppercase letters.

Input Format
First line contains the number of keys n pressed on the phone

Second line contains n space seprated integers that are pressed on the phone.

Output Format
Return a list of strings consisting of all the strings that can be generated by pressing those keys the the phone.

Example 1
Input

2
2 5
Output

DM DN DO EM EN EO FM FN FO
Explanation

When we press 2,5 then
[DM,DN,DO,EM,EN,EO,FM,FN,FO] is the list of possible words.

Example 2
Input

2
6 7
Output

PT PU QT QU RT RU ST SU 
Explanation

When we press 6,7 then
[PT,PU,QT,QU,RT,RU,ST,SU] is the list of possible words.

Constraints
1 <= n <= 10
1 <= key[i] <= 9

Topics
Recursion
Companies
Microsoft
Flipkart
Amazon


import java.util.*;

class Main {
     static String[] keypad = {"ABC", "DEF", "GHI", "JKL", "MNO", "PQRS", "TU", "VWX","YZ","","",""};

    static ArrayList<String> OldPhone(int n, int[] keys) {
        ArrayList<String> result = new ArrayList<>();
        generateCombinations(keys, 0, "", result);
        Collections.sort(result);
        return result;
    }

    static void generateCombinations(int[] keys, int index, String current, ArrayList<String> result) {
        if (index == keys.length) {
            result.add(current);
            return;
        }

       String letters = keypad[keys[index] - 1];
        for (int i = 0; i < letters.length(); i++) {
            generateCombinations(keys, index + 1, current + letters.charAt(i), result);
        }
    }

    public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] keys = new int[n];
        for (int i = 0; i < n; ++i) {
            keys[i] = sc.nextInt();
        }
        ArrayList<String> ans = OldPhone(n, keys);
        for (String i : ans) System.out.print(i + " ");
    }
}
