Get Stair Paths
You are given a number n representing the number of stairs in a staircase. You are standing at the top of the floor. In one step you can jump 1 stair, 2 stairs, or 3 stairs.

Return the list of all paths that can be used to climb up the staircase. See examples for more clarity regarding output.

Note: Write the code recursively. The purpose is to learn recursion and not just solve the problem.

Input Format
First line of input contains a single integer n.

Output Format
Return the list of all paths that can be used to climb up the staircase.

Example 1
Input

3
Output

[111, 12, 21, 3]
Explanation

You can climb the stairs in 4 ways.

111 -> climb up one step, then one step, and then again one step.

12 -> climb up 1 step and then 2 steps.

21 -> climb up 2 steps and then 1 step.

3 -> climb up 3 steps.

Example 2
Input

2
Output

[11, 2]
Explanation

You can climb up this in 2 ways.

Constraints
1 <= n <= 10

Topics
Recursion


import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws Exception {
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        ArrayList<String> paths = getStairPaths(n);
        System.out.println(paths);
    }

    public static ArrayList<String> getStairPaths(int n) {
        // your code here
         if (n == 0) {
            // Base case: return a list containing an empty string
            ArrayList<String> baseCase = new ArrayList<>();
            baseCase.add("");
            return baseCase;
        }
        
        ArrayList<String> result = new ArrayList<>();
        
        if (n >= 1) {
            // Recursive call with reduced value of n by 1
            ArrayList<String> paths1 = getStairPaths(n - 1);
            for (String path : paths1) {
                result.add("1" + path);
            }
        }
        
        if (n >= 2) {
            // Recursive call with reduced value of n by 2
            ArrayList<String> paths2 = getStairPaths(n - 2);
            for (String path : paths2) {
                result.add("2" + path);
            }
        }
        
        if (n >= 3) {
            // Recursive call with reduced value of n by 3
            ArrayList<String> paths3 = getStairPaths(n - 3);
            for (String path : paths3) {
                result.add("3" + path);
            }
        }
        
        return result;
    }
}


                        
                                
